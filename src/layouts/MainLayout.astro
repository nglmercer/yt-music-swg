---
interface Props {
  title: string;
}

const { title } = Astro.props;
import "../styles/global.css";
import Modal from '@components/commons/Modal.svelte';
import QRscan from '@components/SettingsPanel/QRscan.astro';
import QRModal from '@components/QRModal.astro';

---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="icon" type="image/svg+xml" href="/icon-128.png" />
  <link rel="manifest" href="/manifest.json" />
  <meta name="generator" content={Astro.generator} />
  <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
  <link
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
    rel="stylesheet"
  />
  <title>{title}</title>
</head>
<body class="bg-gray-900 text-white overflow-hidden">
  <div class="flex h-screen">
    <!-- Sidebar -->
    <div id="sidebar" class="fixed lg:relative z-40 w-64 bg-gray-900 border-r border-gray-800 flex-shrink-0 transition-all duration-300 transform -translate-x-full lg:translate-x-0 h-full">
      <slot name="sidebar" />
    </div>
    
    <!-- Mobile Overlay -->
    <div id="overlay" class="fixed inset-0 bg-black/50 z-30 lg:hidden hidden"></div>
    
    <!-- Main Content Area -->
    <div class="flex-1 flex flex-col min-w-0 lg:ml-0">
      <!-- Header -->
      <header class="bg-gray-900 border-b border-gray-800 z-10">
        <slot name="header" />
      </header>
      
      <!-- Content -->
      <main class="flex-1 overflow-y-auto bg-gray-900 pb-20 lg:pb-24">
        <slot />
      </main>
    </div>
    <QRModal></QRModal>

  </div>
  
  <script>
    // Mobile sidebar toggle functionality
    document.addEventListener('DOMContentLoaded', () => {
      const menuButton = document.querySelector('[data-menu-button]');
      const sidebar = document.getElementById('sidebar');
      const overlay = document.getElementById('overlay');
      
      function toggleSidebar() {
        if (sidebar && overlay) {
          const isOpen = !sidebar.classList.contains('-translate-x-full');
          
          if (isOpen) {
            // Close sidebar
            sidebar.classList.add('-translate-x-full');
            overlay.classList.add('hidden');
            document.body.classList.remove('overflow-hidden');
          } else {
            // Open sidebar
            sidebar.classList.remove('-translate-x-full');
            overlay.classList.remove('hidden');
            document.body.classList.add('lg:overflow-auto', 'overflow-hidden');
          }
        }
      }
      
      // Menu button click
      if (menuButton) {
        menuButton.addEventListener('click', toggleSidebar);
      }
      
      // Overlay click to close
      if (overlay) {
        overlay.addEventListener('click', toggleSidebar);
      }
      
      // Close sidebar on window resize to desktop
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 1024 && sidebar && overlay) {
          sidebar.classList.add('-translate-x-full', 'lg:translate-x-0');
          overlay.classList.add('hidden');
          document.body.classList.remove('overflow-hidden');
        }
      });
    });
  </script>
</body>
</html>
<script>
    import { YTMusicApi } from "../utils/fetch/fetchapi";
    import { emitter } from "@utils/Emitter";
    import { addImageSrcListenerWithCallback} from "@utils/listeners/ImageOnchange";
    import { LocalStorageData } from '@components/Instances';
    import { createSmartInterval } from "@utils/listeners/interval"
    // Función para obtener la canción y despachar el evento
    const ElementImageId = 'album-cover-main-image';
    addImageSrcListenerWithCallback(ElementImageId,(src:string)=>{
      if (src.includes("base64")) return;
      console.log("src: ",src)
      LocalStorageData.set('imageSrc',src);
    })
  async function checkForUpdates() {
    try {
      const newSongData = await YTMusicApi.getCurrentSong();
      const ElementImage = document.getElementById(ElementImageId) as HTMLImageElement;
      if (ElementImage) {
        ElementImage.src = String((newSongData?.imageSrc || LocalStorageData.get('imageSrc')));
      }

      if (newSongData) {
      //  console.log('Nuevos datos encontrados. Despachando evento "update-song".');
        emitter.emit('update-song', newSongData);
      }
    } catch (error) {
      console.error("Error al buscar actualizaciones:", error);
    }
  }
  checkForUpdates()
  // Hacemos una comprobación periódica para ver si la canción ha cambiado
  createSmartInterval(checkForUpdates); // Cada 10 segundos
  interface QueueItem {
    autoPlaying: boolean,
    continuation?: string,
    items: any[]
  }
  async function getQueue() {
    const queue:QueueItem|null  = await YTMusicApi.getQueue();
  //  console.log("queue: ", queue?.items[0])
    emitter.emit('updatePlaylist', queue?.items)
    return queue
  }
  getQueue()
  createSmartInterval(getQueue);
</script>
<style is:global>
  /* Scrollbar personalizado */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    background: #1f2937;
  }
  
  ::-webkit-scrollbar-thumb {
    background: #4b5563;
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: #6b7280;
  }
</style>