---
// Navbar component similar a YouTube Music
import SettingsMenu from './SettingsPanel/SettingsMenu.astro';
import SettingsItem from './SettingsPanel/SettingsItem.astro';
import SettingsSubmenu from './SettingsPanel/SettingsSubmenu.astro';
import Dropdown from './SettingsPanel/Dropdown.astro';
import LocalStorageInput  from './commons/LocalStorageInput.astro';
import { defaultBtn } from './commons/const_class';
---

<nav class="flex items-center justify-between px-6 py-4 h-16">
  <!-- Left Section: Menu + Logo -->
  <div class="flex items-center space-x-4">
    <!-- Menu Button -->
    <button data-menu-button class="p-2 rounded-full hover:bg-gray-800 transition-colors">
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
    </button>
    
    <!-- Logo -->
    <div class="flex items-center space-x-2">
      <svg class="w-8 h-8 text-red-500" fill="currentColor" viewBox="0 0 24 24">
        <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
      </svg>
      <span class="text-xl font-semibold">Music</span>
    </div>
  </div>
  
  <!-- Center Section: Search Bar -->
  <div class="hidden md:flex flex-1 max-w-2xl mx-8">
    <form id="navbar-search-form" class="w-full">
      <div class="relative">
        <input
          id="navbar-search-input"
          type="text"
          name="q"
          placeholder="Buscar canciones, artistas, álbumes"
          class="w-full bg-gray-800 border border-gray-700 rounded-full py-2 px-4 pl-12 pr-12 focus:outline-none focus:border-gray-500 focus:bg-gray-700 transition-colors"
        />
        <div class="absolute left-4 top-1/2 transform -translate-y-1/2">
          <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
        <button 
          type="submit"
          class="absolute right-2 top-1/2 transform -translate-y-1/2 p-2 rounded-full hover:bg-gray-700 transition-colors"
        >
          <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </button>
      </div>
    </form>
  </div>
  
  <!-- Mobile Search Button -->
  <div class="md:hidden">
    <button id="mobile-search-btn" class="p-2 rounded-full hover:bg-gray-800 transition-colors">
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
    </button>
  </div>
  
  <!-- Right Section: User Actions -->
  <div class="flex items-center space-x-1 md:space-x-2">
    <!-- Cast Button -->

    <!-- Settings Button -->
    <button data-dropdown-trigger="NOMBRE_DEL_DROPDOWN" class="p-2 rounded-full hover:bg-gray-800 transition-colors" data-open-settings>
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
      </svg>
    </button>
    
    <!-- Profile Button -->
    <button class="p-1 rounded-full hover:bg-gray-800 transition-colors ml-2">
      <div class="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center">
        <span>U</span>
      </div>
    </button>
  </div>
</nav>
      <Dropdown dropdownName='NOMBRE_DEL_DROPDOWN'>
    <div slot="content">
      <div class="menu-wrapper-outer">
        <SettingsMenu>
          <!-- Slot: header -->
          <div slot="header" class="user-profile">
            <span>Configuracion</span>
          </div>
  
          <!-- Slot por defecto (Menú Principal) -->
          <SettingsItem label="Aspecto" subtext="Tema del dispositivo" hasSubmenu={true} data-submenu-target="submenu-appearance">
          </SettingsItem>
          <SettingsItem label="ApiConfig" subtext="apiUrl" hasSubmenu={true} data-submenu-target="submenu-configApi">
          </SettingsItem>
          <div></div>
  
          <!-- Slot: submenus -->
          <div slot="submenus">
            <SettingsSubmenu id="submenu-appearance" title="Aspecto">
              <SettingsItem label="Usar tema del dispositivo" />
              <SettingsItem label="Tema oscuro" />
              <SettingsItem label="Tema claro" />
            </SettingsSubmenu>
  
            <SettingsSubmenu id="submenu-configApi" title="ApiConfig">
            <div class="py-2 px-4">
              <LocalStorageInput
                id="apiUrl"
                label="URL"
                placeholder="Introduce tu clave de apiUrl"
                theme='dark'
                class='flex justify-between'
              />
              <LocalStorageInput
                id="apiPORT"
                label="PORT"
                placeholder="Introduce tu clave de apiPORT"
                theme='dark'
                class='flex justify-between'
              />
              <button id="ImportAPIURL" class={defaultBtn}>
                Import API Config
              </button>
              <button id="SaveConfigURL" class={defaultBtn}>
                Guardar
              </button>
            </div>
            </SettingsSubmenu>
          </div>
        </SettingsMenu>
      </div>
    </div>
  </Dropdown>

<!-- Mobile Search Modal -->
<div id="mobile-search-modal" class="fixed inset-0 bg-gray-900 z-50 md:hidden hidden">
  <div class="flex flex-col h-full">
    <!-- Header -->
    <div class="flex items-center p-4 border-b border-gray-800">
      <button id="close-mobile-search" class="p-2 rounded-full hover:bg-gray-800 transition-colors mr-3">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      <form id="mobile-search-form" class="flex-1">
        <div class="relative">
          <input
            id="mobile-search-input"
            type="text"
            name="q"
            placeholder="Buscar canciones, artistas, álbumes"
            class="w-full bg-gray-800 border border-gray-700 rounded-full py-2 px-4 pl-12 pr-12 focus:outline-none focus:border-gray-500 focus:bg-gray-700 transition-colors"
            autofocus
          />
          <div class="absolute left-4 top-1/2 transform -translate-y-1/2">
            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
          <button 
            type="submit"
            class="absolute right-2 top-1/2 transform -translate-y-1/2 p-2 rounded-full hover:bg-gray-700 transition-colors"
          >
            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </button>
        </div>
      </form>
    </div>
    
    <!-- Search Suggestions -->
    <div class="flex-1 p-4">
      <h3 class="text-lg font-medium text-gray-300 mb-4">Búsquedas populares</h3>
      <div class="space-y-2">
        <button class="mobile-search-suggestion w-full text-left px-4 py-3 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors" data-query="rock clásico">
          <div class="flex items-center space-x-3">
            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
            <span class="text-gray-300">Rock clásico</span>
          </div>
        </button>
        
        <button class="mobile-search-suggestion w-full text-left px-4 py-3 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors" data-query="pop latino">
          <div class="flex items-center space-x-3">
            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
            <span class="text-gray-300">Pop latino</span>
          </div>
        </button>
        
        <button class="mobile-search-suggestion w-full text-left px-4 py-3 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors" data-query="jazz">
          <div class="flex items-center space-x-3">
            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
            <span class="text-gray-300">Jazz</span>
          </div>
        </button>
        
        <button class="mobile-search-suggestion w-full text-left px-4 py-3 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors" data-query="reggaeton">
          <div class="flex items-center space-x-3">
            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
            <span class="text-gray-300">Reggaeton</span>
          </div>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
    import { parseYouTubeMusicResponse } from '../utils/fetch/youtube-music-parser';
  import type { YouTubeMusicSearchResponse } from '../utils/fetch/youtube-music';
  import apiConfig from '@utils/fetch/config/apiConfig';
  import { YTMusicApi } from "../utils/fetch/fetchapi";
  import { emitter } from '@utils/Emitter';
  import { QRCallbackname } from './commons/const_emits';
  
	async function getPlaylist(query:string) {
		const result = await YTMusicApi.search({
			query: query,
		})
		return result;
	}

  async function performSearch(query: string) {    
    const result = await getPlaylist(query)
    // Parsear y renderizar resultados
    const cleanData = parseYouTubeMusicResponse(result);
    emitter.emit('dataUpdated',cleanData);
    return result
  }
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;


    // Búsqueda en tiempo real (opcional, con debounce)
    let searchTimeout: number;
    searchInput?.addEventListener('input', () => {
      clearTimeout(searchTimeout);
      searchTimeout = window.setTimeout(() => {
        const query = searchInput.value.trim();
        if (query.length > 2) {
          performSearch(query);
        }
      }, 500);
    });

    // Desktop search form
    const navbarSearchForm = document.getElementById('navbar-search-form');
    const navbarSearchInput = document.getElementById('navbar-search-input') as HTMLInputElement;
    
    // Mobile search elements
    const mobileSearchBtn = document.getElementById('mobile-search-btn');
    const mobileSearchModal = document.getElementById('mobile-search-modal');
    const closeMobileSearch = document.getElementById('close-mobile-search');
    const mobileSearchForm = document.getElementById('mobile-search-form');
    const mobileSearchInput = document.getElementById('mobile-search-input') as HTMLInputElement;
    const mobileSearchSuggestions = document.querySelectorAll('.mobile-search-suggestion');
    
    // Function to redirect to search page with query
    async function redirectToSearch(query: string) {
      if (!query || query.length === 0) return;
      console.log("redirectToSearch",query)
      await performSearch(query)
      mobileSearchModal?.classList.add('hidden');
    }
    
    // Desktop search form submission
    navbarSearchForm?.addEventListener('submit', (e) => {
      e.preventDefault();
      redirectToSearch(navbarSearchInput.value);
    });
    
    // Mobile search button click
    mobileSearchBtn?.addEventListener('click', () => {
      mobileSearchModal?.classList.remove('hidden');
      mobileSearchInput?.focus();
    });
    
    // Close mobile search
    closeMobileSearch?.addEventListener('click', () => {
      mobileSearchModal?.classList.add('hidden');
    });
    
    // Mobile search form submission
    mobileSearchForm?.addEventListener('submit', (e) => {
      e.preventDefault();
      redirectToSearch(mobileSearchInput.value);
    });
    
    // Mobile search suggestions
    mobileSearchSuggestions.forEach(suggestion => {
      suggestion.addEventListener('click', () => {
        const query = suggestion.getAttribute('data-query');
        if (query) {
          redirectToSearch(query);
        }
      });
    });
    
    // Close modal on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !mobileSearchModal?.classList.contains('hidden')) {
        mobileSearchModal?.classList.add('hidden');
      }
    });
    const apiUrlInput = document.getElementById('apiUrl') as HTMLInputElement;
    const apiPortInput = document.getElementById('apiPORT') as HTMLInputElement;
    emitter.on(QRCallbackname, (data:{
      hostname:string;
      port:string;
      protocol:string;
    }) => {
      console.log('QRCallbackname',data)
      apiUrlInput.value = data.hostname;
      apiPortInput.value = data.port
      apiConfig.update({
          host: data.hostname,
          port: data.port,
      })
    })
    apiUrlInput?.addEventListener('change', (e) => {
      const target = e.target as HTMLInputElement;
      const apiUrl = target.value;
      apiConfig.update({
          host: apiUrl
      })
    });
  });
</script>